<project xmlns="http://maven.apache.org/POM/4.0.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                          http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!-- pom 版本 -->
	<modelVersion>4.0.0</modelVersion>

	<!-- 组织ID，com.hsbc.ds.xxx -->
	<groupId>...</groupId>
	<!-- 项目ID，maven-intro -->
	<artifactId>...</artifactId>
	<!-- 项目版本 -->
	<version>...</version>
	<!-- 打包类型，jar,zip -->
	<packaging>...</packaging>
	<!-- 项目引用的依赖 -->
	<dependencies>
		<!-- 坐标 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<!-- 依赖类型，一般在pom引用依赖时候出现 test-jar -->
			<type>jar</type>
			<!-- 作用域 
			compile，编译范围，默认的范围，依赖在所有的classpath中可用，同时它们也会被打包
			provided，已提供范围，在当JDK或者一个容器已提供该依赖，依赖在编译classpath（不是运行时）可用，不会被打包，Servlet API
			runtime，运行时范围，依赖在运行和测试系统的时候需要，但在编译的时候不需要
			test，测试范围，编译和运行时都不需要，只有在测试编译和测试运行阶段可用
			system，系统范围，与provided类似，必须显式的提供一个对于本地系统中JAR文件的路径 -->
			<scope>test</scope>
			<systemPath>/path/to/jar</systemPath>
			<!-- 是否可选依赖 -->
			<optional>true</optional>
			<!-- 排除依赖传递 -->
			<exclusions>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>
	<!-- 父级项目的信息 -->
	<parent>...</parent>
	<!-- 依赖管理，顶级项目 -->
	<dependencyManagement>...</dependencyManagement>
	<!-- 聚合模块 -->
	<modules>
		<module>sub-module</module>
	</modules>
	<!-- 变量 -->
	<!-- env 
    暴露操作系统的环境变量，比如env.PATH
    project 
    暴露POM中的内容，用点号(.)的路径来引用POM元素的值，比如${project.artifactId}。另外，java的系统属性比如user.dir等，也暴露在这里
    settings 
    暴露maven的settings的信息 -->
	<properties>...</properties>

	<!-- 构建项目需要的信息 -->
	<build>
		<!-- BaseBuild -->
		<finalName>${artifactId}-${version}</finalName>
		<!--子项目可以引用的默认插件信息 -->
		<pluginManagement></pluginManagement>
		<!--使用的插件列表 -->
		<plugins>
			<plugin>
				<!--插件在仓库里的group ID -->
				<groupId />
				<!--插件在仓库里的artifact ID -->
				<artifactId />
				<!--被使用的插件的版本（或版本范围） -->
				<version />
				<!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled -->
				<extensions />
				<!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
				<executions>
					<!--execution元素包含了插件执行需要的信息 -->
					<execution>
						<!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 -->
						<id />
						<!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 -->
						<phase />
						<!--配置的执行目标 -->
						<goals />
						<!--配置是否被传播到子POM -->
						<inherited />
						<!--作为DOM对象的配置 -->
						<configuration />
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<!--该元素描述使用报表插件产生报表的规范。当用户执行"mvn site"，这些报表就会运行。 在页面导航栏能看到所有报表的链接 -->
	<reporting>
		<!--true，则，网站不包括默认的报表。这包括"项目信息"菜单中的报表 -->
		<excludeDefaults />
		<!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site -->
		<outputDirectory />
		<!--使用的报表插件和他们的配置。 -->
		<plugins>
			<!--plugin元素包含描述报表插件需要的信息 -->
			<plugin>
				<!--报表插件在仓库里的group ID -->
				<groupId />
				<!--报表插件在仓库里的artifact ID -->
				<artifactId />
				<!--被使用的报表插件的版本（或版本范围） -->
				<version />
				<!--任何配置是否被传播到子项目 -->
				<inherited />
				<!--报表插件的配置 -->
				<configuration />
				<!--一组报表的多重规范，每个规范可能有不同的配置 -->
				<reportSets>
					<!--表示报表的一个集合，以及产生该集合的配置 -->
					<reportSet>
						<!--报表集合的唯一标识符，POM继承时用到 -->
						<id />
						<!--产生报表集合时，被使用的报表的配置 -->
						<configuration />
						<!--配置是否被继承到子POMs -->
						<inherited />
						<!--这个集合里使用到哪些报表 -->
						<reports />
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

	<!-- More Project Information -->
	<!--项目的名称, Maven产生的文档用 -->
	<name>xxx</name>
	<!--项目主页的URL, Maven产生的文档用 -->
	<url>http://xxx.xxx</url>
	<!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 
        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档 -->
	<description>A maven project to study maven.</description>
	<!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 -->
	<inceptionYear>...</inceptionYear>
	<!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license -->
	<licenses>...</licenses>
	<!--描述项目所属组织的各种属性。Maven产生的文档用 -->
	<organization>...</organization>
	<!--项目开发者列表 -->
	<developers>...</developers>
	<!--项目的其他贡献者列表 -->
	<contributors>...</contributors>

	<!-- Environment Settings -->
	<!--项目的问题管理系统( Jira或任何你喜欢的问题管理系统)的名称和URL，本例为 jira -->
	<issueManagement>
		<!--问题管理系统（例如jira）的名字， -->
		<system>jira</system>
		<!--该项目使用的问题管理系统的URL -->
		<url>http://jira.baidu.com/banseon</url>
	</issueManagement>
	<!--项目持续集成信息 -->
	<ciManagement>
		<!--持续集成系统的名字，例如continuum -->
		<system />
		<!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 -->
		<url />
		<!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） -->
		<notifiers>
			<!--配置一种方式，当构建中断时，以该方式通知用户/开发者 -->
			<notifier>
				<!--传送通知的途径 -->
				<type />
				<!--发生错误时是否通知 -->
				<sendOnError />
				<!--构建失败时是否通知 -->
				<sendOnFailure />
				<!--构建成功时是否通知 -->
				<sendOnSuccess />
				<!--发生警告时是否通知 -->
				<sendOnWarning />
				<!--不赞成使用。通知发送到哪里 -->
				<address />
				<!--扩展配置项 -->
				<configuration />
			</notifier>
		</notifiers>
	</ciManagement>
	<!--项目相关邮件列表信息 -->
	<mailingLists>...</mailingLists>
	<!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 -->
	<scm>
		<!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 -->
		<connection>
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)
		</connection>
		<!--给开发者使用的，类似connection元素。即该连接不仅仅只读 -->
		<developerConnection>
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk
		</developerConnection>
		<!--当前代码的标签，在开发阶段默认为HEAD -->
		<tag />
		<!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 -->
		<url>http://svn.baidu.com/banseon</url>
	</scm>
	<!--描述了这个项目构建环境中的前提条件。 -->
	<prerequisites>...</prerequisites>
	<!--发现依赖和扩展的远程仓库列表。 -->
	<repositories>...</repositories>
	<!--发现插件的远程仓库列表，这些插件用于构建和报表 -->
	<pluginRepositories>...</pluginRepositories>
	<!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 -->
	<distributionManagement>
		<!--部署项目产生的构件到远程仓库需要的信息 -->
		<repository>
			<!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 -->
			<uniqueVersion />
			<id>banseon-maven2</id>
			<name>banseon maven2</name>
			<url>file://${basedir}/target/deploy</url>
			<layout />
		</repository>
		<!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 -->
		<snapshotRepository>
			<uniqueVersion />
			<id>banseon-maven2</id>
			<name>Banseon-maven2 Snapshot Repository</name>
			<url>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot</url>
			<layout />
		</snapshotRepository>
		<!--部署项目的网站需要的信息 -->
		<site>
			<!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 -->
			<id>banseon-site</id>
			<!--部署位置的名称 -->
			<name>business api website</name>
			<!--部署位置的URL，按protocol://hostname/path形式 -->
			<url>
                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web
			</url>
		</site>
		<!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 -->
		<downloadUrl />
		<!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 -->
		<relocation>
			<!--构件新的group ID -->
			<groupId />
			<!--构件新的artifact ID -->
			<artifactId />
			<!--构件新的版本号 -->
			<version />
			<!--显示给用户的，关于移动的额外信息，例如原因。 -->
			<message />
		</relocation>
		<!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 
            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 -->
		<status />
	</distributionManagement>
	<!--在列的项目构建profile，如果被激活，会修改构建处理 -->
	<profiles>...</profiles>
</project>